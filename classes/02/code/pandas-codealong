import os
import numpy as np
import pandas as pd

df = pd.read_csv(os.path.join('..', 'datasets', 'zillow-02-start.csv'))

# print type(df)

# ------------ Selecting Columns ------------

# can print all values of a column by calling the index of the column
# print df[ [5,6] ]

# calling the columns method followed by the index returns the name of the column at that position
# print df.columns[2]

# if values passed to [] are non-integers, DataFrame will attempt to match them to values in columns index
# note: column names are case-sensitive
# print df[ ['Size', 'Longitude'] ]

# can also use attributes to access columns!
# print df.Size

# can identify a particular column's location by invoking the .get_loc() method 
# print df.columns.get_loc('Size')

# ------------ Selecting Rows ------------
# slicing using the [] operator -- e.g., second through fourth rows
# print df[1:4]

# if index not known, can change index to a specified column's values to lookup values for a given ID
# df = df.set_index('ID')
# print df.loc[15064044]

# .loc matches argument values to values in the index, while .iloc matches argument values to absolute position in the dataset
# print df.iloc[3]

# ------------ Selecting Scalar Values ------------

# scalar values are individual data points, like cells in an Excel spreadsheet
# select scalar values using .at and arguments [.loc value, column name]
# print df.set_index('ID')
# print df.at[15064044, 'Longitude']

# or, select scalar values using .iat and args [.iloc value, column position]
# print df.iat[3, 3]

# ------------ Selecting Rows Using Boolean Selection ------------
# returns only rows wherein conditional is true
# print df [df.BuiltInYear < 1900]

# multiple conditionals can be combined -- e.g., built between 1920 and 1980 and address contains 'ave'
# print df [(df.BuiltInYear > 1977) & (df.BuiltInYear < 1980) & (df.Size > 1399) ]

# can also select a subset of columns while invoking boolean selection
# print df[ (df.Size > 800) & (df.BuiltInYear == 1980) ][ ['Address'] ]
